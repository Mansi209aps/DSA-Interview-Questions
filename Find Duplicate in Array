3. Find Duplicate in Array

Given a read-only array of n + 1 integers between 1 and n, find one number that repeats in linear time using less than O(n) space and traversing the stream sequentially O(1) times.
If there are multiple possible answers ( like in the sample case ), output any one, if there is no duplicate, output -1

https://leetcode.com/problems/find-the-duplicate-number/

Floydâ€™s Tortoise and Hare Algorithm:

JAVA

class Solution {
    public int findDuplicate(int[] nums) {
        int n=nums.length;
        int slow=nums[0];
        int fast=nums[0];

        // Find the intersection point of the two pointers
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);

        // Find the entrance of the cycle
        slow=nums[0];
        while(slow!=fast){
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
}

C++

int Solution::repeatedNumber(const vector<int> &A) {    
    int slow = A[0];
    int fast = A[0];

    // Find the intersection point of the two pointers
    do {
        slow = A[slow];
        fast = A[A[fast]];
    } while (slow != fast);

    // Find the entrance of the cycle
    slow = A[0];
    while (slow != fast) {
        slow = A[slow];
        fast = A[fast];
    }

    return slow;
}
